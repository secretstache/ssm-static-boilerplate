//helper
@function strip-unit($value) {
    @return $value / ($value * 0 + 1);
}

// responsive font size
// usage: @include responsive-type(20,16,1.6);
@mixin responsive-type($max-font-size, $min-font-size: ($max-font-size - ($max-font-size * 0.3)), $line-height: normal, $min-vw: map-get($breakpoints, 'medium'), $max-vw: map-get($breakpoints, 'large')) {
    & {
        font-size: rem-calc($min-font-size);

        @if $line-height == normal {

        } @else if $line-height % 1 == 0 {
            line-height: $line-height / $max-font-size;
        } @else {
            line-height: $line-height;
        }

        @media screen and (min-width: #{$min-vw * 1px}) {
            font-size: calc(#{$min-font-size * 1px} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw * 1px}) / #{strip-unit($max-vw - $min-vw)}));
        }

        @media screen and (min-width: #{$max-vw * 1px}) {
            font-size: rem-calc($max-font-size);
        }
    }
}

// font size
// usage @include font-size(32, 60);
@mixin font-size($font-size, $line-height: normal) {
    font-size: rem-calc($font-size);

    @if $line-height == normal {

    } @else if $line-height % 1 == 0 {
        line-height: $line-height / $font-size;
    } @else {
        line-height: $line-height;
    }
}


////
/// Helper function to easily use an SVG inline in CSS
/// without encoding it to base64, saving bytes.
/// It also helps with browser support.
////

/// A small function allowing skipping base64 encoding
/// and simply pasting the SVG markup right in the CSS.
/// @author Jakob Eriksen
/// @link http://codepen.io/jakob-e/pen/doMoML
/// @param {String} $svg - SVG image to encode
/// @return {String} - Encoded SVG data uri
//  background: svg-uri('<svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="18.4px" height="9.4px" viewBox="0 0 18.4 9.4" style="enable-background:new 0 0 18.4 9.4;" xml:space="preserve"><path style="fill:#5BD8C6;" d="M9.2,9.4c-0.8,0-1.6-0.3-2.1-0.9L0,1.4L1.4,0l7.1,7.1c0.4,0.4,1,0.4,1.4,0L17,0l1.4,1.4l-7.1,7.1 C10.7,9.1,10,9.4,9.2,9.4z"/></svg>');
@function svg-uri($svg) {
    $encoded: '';
    $slice: 2000;
    $index: 0;
    $loops: ceil(str-length($svg) / $slice);

    @for $i from 1 through $loops {
        $chunk: str-slice($svg, $index, $index + $slice - 1);
        $chunk: str-replace($chunk, '"', "'");
        $chunk: str-replace($chunk, '<', '%3C');
        $chunk: str-replace($chunk, '>', '%3E');
        $chunk: str-replace($chunk, '&', '%26');
        $chunk: str-replace($chunk, '#', '%23');
        $encoded: #{$encoded}#{$chunk};
        $index: $index + $slice;
    }

    @return url("data:image/svg+xml;charset=utf8,#{$encoded}");
}


/// Replace `$search` with `$replace` in `$string`
/// @author Hugo Giraudel
/// @link http://sassmeister.com/gist/1b4f2da5527830088e4d
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }

    @return $string;
}

@mixin typo($type) {
    @if $type=='h1' {
        font-family: var(--alt-font);
        @include responsive-type(132,62);
        font-weight: 700;
        line-height: 100%;
    }

    @if $type=='h2' {
        font-family: var(--alt-font);
        @include responsive-type(60,42);
        font-weight: 700;
        line-height: 110%;
    }

    @if $type=='h3' {
        font-family: var(--body-font);
        @include responsive-type(42,32);
        font-weight: 400;
        line-height: 120%;
    }

    @if $type=='h4' {
        font-family: var(--body-font);
        @include responsive-type(32,24);
        font-weight: 400;
        line-height: 120%;
    }

    @if $type=='h5' {
        font-family: var(--alt-font);
        @include responsive-type(24,22);
        font-weight: 300;
        line-height: 120%;
    }

    @if $type=='h6' {
        font-family: var(--body-font);
        font-size: rem-calc(22);
        font-weight: 300;
        line-height: 120%;
    }

    @if $type=='h7' {
        font-family: var(--alt-font);
        font-size: rem-calc(18);
        font-weight: 300;
        line-height: 120%;
    }

    @if $type=='h8' {
        font-family: var(--body-font);
        font-size: rem-calc(18);
        font-weight: 500;
        line-height: 120%;
    }

    @if $type=='body' {
        font-family: var(--body-font);
        font-size: rem-calc(16);
        font-weight: 300;
        line-height: 140%;
    }

    @if $type=='body-large' {
        font-family: var(--body-font);
        font-size: rem-calc(18);
        font-weight: 300;
        line-height: 140%;
    }

    @if $type=='body-small' {
        font-family: var(--body-font);
        font-size: rem-calc(14);
        font-weight: 400;
        line-height: 120%;
    }
}

@mixin overlay() {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    width: 100%;
    height: 100%;
}
